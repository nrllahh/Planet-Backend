// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Planet.Persistence.Contexts;

#nullable disable

namespace Planet.Persistence.Migrations
{
    [DbContext(typeof(PlanetContext))]
    [Migration("20240612180857_BoardListOrder")]
    partial class BoardListOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Planet.Domain.Boards.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("Modules")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Planet.Domain.Boards.BoardLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("BoardLabels", (string)null);
                });

            modelBuilder.Entity("Planet.Domain.Boards.BoardList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Order")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("BoardLists", (string)null);
                });

            modelBuilder.Entity("Planet.Domain.Cards.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Order")
                        .HasColumnType("float");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("ListId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cards", (string)null);
                });

            modelBuilder.Entity("Planet.Domain.Cards.CardCheckList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardCheckLists", (string)null);
                });

            modelBuilder.Entity("Planet.Domain.Cards.CardCheckListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CheckListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.ToTable("CardCheckListItems", (string)null);
                });

            modelBuilder.Entity("Planet.Domain.Cards.CardComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("CardComments", (string)null);
                });

            modelBuilder.Entity("Planet.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("TokenExpireDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Planet.Domain.Boards.Board", b =>
                {
                    b.HasOne("Planet.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Planet.Domain.Boards.BoardTitle", "Title", b1 =>
                        {
                            b1.Property<Guid>("BoardId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("BoardId");

                            b1.ToTable("Boards");

                            b1.WithOwner()
                                .HasForeignKey("BoardId");
                        });

                    b.OwnsOne("Planet.Domain.Boards.BoardDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("BoardId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Description");

                            b1.HasKey("BoardId");

                            b1.ToTable("Boards");

                            b1.WithOwner()
                                .HasForeignKey("BoardId");
                        });

                    b.OwnsMany("Planet.Domain.Boards.BoardMember", "Members", b1 =>
                        {
                            b1.Property<Guid>("BoardId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("JoinedDate")
                                .HasColumnType("datetime2");

                            b1.Property<short>("Permissions")
                                .HasColumnType("smallint");

                            b1.HasKey("BoardId", "UserId");

                            b1.HasIndex("UserId");

                            b1.ToTable("BoardMembers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BoardId");

                            b1.HasOne("Planet.Domain.Users.User", null)
                                .WithMany()
                                .HasForeignKey("UserId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Members");

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("Planet.Domain.Boards.BoardLabel", b =>
                {
                    b.HasOne("Planet.Domain.Boards.Board", null)
                        .WithMany("Labels")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Planet.Domain.Boards.BoardTitle", "Title", b1 =>
                        {
                            b1.Property<Guid>("BoardLabelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("BoardLabelId");

                            b1.ToTable("BoardLabels");

                            b1.WithOwner()
                                .HasForeignKey("BoardLabelId");
                        });

                    b.OwnsOne("Planet.Domain.Boards.BoardLabelColor", "Color", b1 =>
                        {
                            b1.Property<Guid>("BoardLabelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(7)
                                .HasColumnType("nvarchar(7)")
                                .HasDefaultValue("#ffffff")
                                .HasColumnName("ColorCode");

                            b1.HasKey("BoardLabelId");

                            b1.ToTable("BoardLabels");

                            b1.WithOwner()
                                .HasForeignKey("BoardLabelId");
                        });

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("Planet.Domain.Boards.BoardList", b =>
                {
                    b.HasOne("Planet.Domain.Boards.Board", null)
                        .WithMany("Lists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Planet.Domain.Boards.BoardTitle", "Title", b1 =>
                        {
                            b1.Property<Guid>("BoardListId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Title");

                            b1.HasKey("BoardListId");

                            b1.ToTable("BoardLists");

                            b1.WithOwner()
                                .HasForeignKey("BoardListId");
                        });

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("Planet.Domain.Cards.Card", b =>
                {
                    b.HasOne("Planet.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("Planet.Domain.Boards.BoardList", null)
                        .WithMany()
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planet.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Planet.Domain.Cards.CardTitle", "Title", b1 =>
                        {
                            b1.Property<Guid>("CardId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("CardId");

                            b1.ToTable("Cards");

                            b1.WithOwner()
                                .HasForeignKey("CardId");
                        });

                    b.OwnsOne("Planet.Domain.Cards.CardDates", "Dates", b1 =>
                        {
                            b1.Property<Guid>("CardId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime?>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartDate");

                            b1.HasKey("CardId");

                            b1.ToTable("Cards");

                            b1.WithOwner()
                                .HasForeignKey("CardId");
                        });

                    b.OwnsOne("Planet.Domain.Cards.CardDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("CardId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Description");

                            b1.HasKey("CardId");

                            b1.ToTable("Cards");

                            b1.WithOwner()
                                .HasForeignKey("CardId");
                        });

                    b.OwnsMany("Planet.Domain.Cards.CardLabel", "Labels", b1 =>
                        {
                            b1.Property<Guid>("BoardLabelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CardId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("BoardLabelId", "CardId");

                            b1.HasIndex("CardId");

                            b1.ToTable("CardLabels", (string)null);

                            b1.HasOne("Planet.Domain.Boards.BoardLabel", null)
                                .WithMany()
                                .HasForeignKey("BoardLabelId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("CardId");
                        });

                    b.Navigation("Dates");

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Labels");

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("Planet.Domain.Cards.CardCheckList", b =>
                {
                    b.HasOne("Planet.Domain.Cards.Card", null)
                        .WithMany("CheckLists")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Planet.Domain.Cards.CardTitle", "CardTitle", b1 =>
                        {
                            b1.Property<Guid>("CardCheckListId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Title");

                            b1.HasKey("CardCheckListId");

                            b1.ToTable("CardCheckLists");

                            b1.WithOwner()
                                .HasForeignKey("CardCheckListId");
                        });

                    b.Navigation("CardTitle")
                        .IsRequired();
                });

            modelBuilder.Entity("Planet.Domain.Cards.CardCheckListItem", b =>
                {
                    b.HasOne("Planet.Domain.Cards.CardCheckList", null)
                        .WithMany("Items")
                        .HasForeignKey("CheckListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Planet.Domain.Cards.CardCheckListItemContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("CardCheckListItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Content");

                            b1.HasKey("CardCheckListItemId");

                            b1.ToTable("CardCheckListItems");

                            b1.WithOwner()
                                .HasForeignKey("CardCheckListItemId");
                        });

                    b.Navigation("Content")
                        .IsRequired();
                });

            modelBuilder.Entity("Planet.Domain.Cards.CardComment", b =>
                {
                    b.HasOne("Planet.Domain.Cards.Card", null)
                        .WithMany("Comments")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planet.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Planet.Domain.Cards.CardCommentContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("CardCommentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Content");

                            b1.HasKey("CardCommentId");

                            b1.ToTable("CardComments");

                            b1.WithOwner()
                                .HasForeignKey("CardCommentId");
                        });

                    b.Navigation("Content")
                        .IsRequired();
                });

            modelBuilder.Entity("Planet.Domain.Users.User", b =>
                {
                    b.OwnsOne("Planet.Domain.Users.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasFilter("[Email] IS NOT NULL");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Planet.Domain.Users.FirstName", "FirstName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("FirstName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Planet.Domain.Users.LastName", "LastName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FirstName")
                        .IsRequired();

                    b.Navigation("LastName")
                        .IsRequired();
                });

            modelBuilder.Entity("Planet.Domain.Boards.Board", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("Lists");
                });

            modelBuilder.Entity("Planet.Domain.Cards.Card", b =>
                {
                    b.Navigation("CheckLists");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Planet.Domain.Cards.CardCheckList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
